@page "/calendar"
@using System.Globalization
@using System.Collections.Generic
@using System.IO
@using Newtonsoft.Json
@using EdUnity.Data
@using System.Net
@using Microsoft.Extensions.Primitives
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@code
{
	public class Day
	{
		public int day { get; set; }
		public DateTime date;
		public bool IsCurrentMonth { get; set; }
		public List<Event> ScheduledEvents { get; set; }
	}
	public class Week
	{
		public List<Day> Days { get; set; } = new List<Day>();
	}
	public class Event
	{
		public string title { get; set; }
		public string description { get; set; }
		public DateTime start { get; set; }
		public DateTime end { get; set; }
		public EventType type { get; set; }
	}
	public enum EventType
	{
		Holidays,
		Clubs,
		Athletics,
		Celebrations
	}
}
<NavMenu Title="@Title" />
<section/>
<section>
	<div class="d-flex justify-content-center" style="padding-bottom: 1em">
		<button class="btn month-nav" @onclick="PrevMonth">&lt;</button>
		<h3 class="align-middle">@CurrentMonth.ToString("MMMM yyyy")</h3>
		<button class="btn month-nav" @onclick="NextMonth">&gt;</button>
	</div>
	<table class="table">
		<thead>
			<tr>
				@foreach (var dayOfWeek in Enum.GetValues(typeof(DayOfWeek)))
				{
					<th scope="col">@dayOfWeek.ToString().Substring(0, 3)</th>
				}
			</tr>
		</thead>
		<tbody>
			@foreach (var week in Weeks)
			{
				<tr>
					@foreach (var day in week.Days)
					{
						<td scope="row" @onclick="()=>ToggleDay(day)" style="background-color:@(day.Equals(selectedDay) ? "rgba(219, 50, 77, 0.2)" : "")">
							<div class="@(day.IsCurrentMonth ? "day-header" : "text-muted")">@day.day</div>
							<ul class="d-flex flex-row">
								@foreach (var e in GetEvents(day.date))
								{
									<li class="event-dot" style="background-color:@GetType(e)"></li>
								}
							</ul>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
	@if (selectedDay != null)
	{
		<div class="selected container-fluid">
			<div class="row">
				<h4 class="text-center">Events on <strong>@(selectedDayTitle)</strong></h4>
			</div>
			<div class="row my-3">
				<div class="col container-fluid">
					<ul class="list-group">
						@foreach (var e in GetEvents(selectedDay.date))
						{
							<li class="btn btn-dark list-group-item" style="background-color:@GetType(e)" @onclick="()=>SetEvent(e)">@e.title</li>
						}
					</ul>
				</div>
				@if (@selectedEvent != null)
				{
					<div class="col container-fluid">
						<div class="row container-fluid">
							<h4><strong>@selectedEvent.title</strong></h4>
							<h6>@selectedEvent.description</h6>
							<h6><strong>Start: </strong>@selectedEvent.start.ToString("hh:mm tt")</h6>
							<h6><strong>End: </strong>@selectedEvent.end.ToString("hh:mm tt")</h6>
						</div>
					</div>
				}
				else
				{
					<div class="col container-fluid">
						<div class="row container-fluid">
							<h4><strong></strong></h4>
						</div>
					</div>
				}
			</div>
			<hr>
			<div class="row justify-content-center mb-4">
				<button class="btn active w-25" @onclick="OpenPopup">Add Event</button>
			</div>
			<br/>
			<br/>
		</div>
	}
</section>
<section/>
@code
{
	private string Title = "Calendar";
	private DateTime CurrentMonth = DateTime.Today;
	private List<Week> Weeks = new();
	private bool DayExpand;
	private Day selectedDay;
	private Event selectedEvent;
	private Dictionary<string, List<Event>> allEvents;
	private string selectedDayTitle;
	private string popupDisplay = "none";
	private Event Model = new();
	private string collapseDay => DayExpand ? "selected" : "collapse";
	protected async override void OnInitialized()
	{
		DayExpand = false;
		selectedDay = null;
		selectedEvent = null;
		await ReadEvents();
		base.OnInitialized();
		UpdateWeeks();
		StateHasChanged();
	}
	private void PrevMonth()
	{
		ToggleDay(null);
		CurrentMonth = CurrentMonth.AddMonths(-1);
		UpdateWeeks();
	}
	private void NextMonth()
	{
		ToggleDay(null);
		CurrentMonth = CurrentMonth.AddMonths(1);
		UpdateWeeks();
	}
	private string GetType(Event e)
	{
		switch (e.type)
		{
			case EventType.Holidays:
				return "#936D06";
			case EventType.Clubs:
				return "#0624B6";
			case EventType.Athletics:
				return "#107B05";
			case EventType.Celebrations:
				return "#986525";
			default:
				return "";
		}
	}
	private async Task ReadEvents()
	{
		using var stream = await FileSystem.OpenAppPackageFileAsync("events.json");
		using (var reader = new StreamReader(stream))
		{
			var json = await reader.ReadToEndAsync();
			allEvents = JsonConvert.DeserializeObject<Dictionary<string, List<Event>>>(json);
		}
	}
	private void UpdateWeeks()
	{
		var firstDayOfMonth = new DateTime(CurrentMonth.Year, CurrentMonth.Month, 1);
		var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
		var start = firstDayOfMonth.AddDays(-(int)firstDayOfMonth.DayOfWeek);
		var end = lastDayOfMonth.AddDays(6 - (int)lastDayOfMonth.DayOfWeek);
		var weeks = new List<Week>();
		for (var date = start; date <= end; date = date.AddDays(1))
		{
			if (date.DayOfWeek == DayOfWeek.Sunday) weeks.Add(new Week());
			weeks.Last().Days.Add(new Day {
				date = date,
				day = date.Day,
				IsCurrentMonth = date.Month == CurrentMonth.Month,
				ScheduledEvents = GetEvents(date)
			});
		}
		Weeks = weeks;
	}
	private void OpenPopup()
	{
		popupDisplay = "block";
	}
	private void ClosePopup()
	{
		popupDisplay = "none";
	}
	private List<Event> GetEvents(DateTime date)
	{
		List<Event> today = new();
		foreach (Event e in allEvents[date.Month.ToString()]) if (date.Day >= e.start.Day && date.Day <= e.end.Day) today.Add(e);
		return today;
	}
	private void SetEvent(Event e)
	{
		selectedEvent = e;
	}
	private void ToggleDay(Day day)
	{
		if (day == null)
		{
			DayExpand = false;
			selectedDay = null;
			selectedDayTitle = null;
			selectedEvent = null;
		}
		else
		{
			if (day == selectedDay)
			{
				selectedDay = null;
				DayExpand = false;
				selectedEvent = null;
			}
			else
			{
				selectedDay = day;
				DayExpand = true;
				selectedDayTitle = selectedDay.date.ToString("dddd, MMMM d");
				if (selectedDay.ScheduledEvents.Count() > 0) selectedEvent = selectedDay.ScheduledEvents[0];
				else selectedEvent = null;
			}
		}
	}
	private bool ValidModel(Event m)
	{
		return m.title == null || m.description == null;
	}
	private void Submit()
	{
		if (ValidModel(Model)) return;
		selectedDay.ScheduledEvents.Add(Model);
	}
}