@page "/calendar"
@using System.Globalization
<NavMenu Title="@Title" />

<div class="d-flex justify-content-center" style="padding-bottom: 1em">
	<button class="btn month-nav" @onclick="PrevMonth">&lt;</button>
	<h3 class="align-middle">@CurrentMonth.ToString("MMMM yyyy")</h3>
	<button class="btn month-nav" @onclick="NextMonth">&gt;</button>
</div>

<table class="table">
	<thead>
		<tr>
			@foreach (var dayOfWeek in Enum.GetValues(typeof(DayOfWeek)))
			{
				<th>@dayOfWeek.ToString().Substring(0, 3)</th>
			}
		</tr>
	</thead>
	<tbody>
		@foreach (var week in Weeks)
		{
			<tr>
				@foreach (var day in week.Days)
				{
					<td class="@(day.IsCurrentMonth ? "" : "text-muted")" @onclick="()=>ToggleDay(day)">
						<div class="day-header">@day.day</div>
						<ul class="list-unstyled">
							@foreach (var scheduledEvent in day.ScheduledEvents)
							{
								<li>@scheduledEvent</li>
							}
						</ul>
					</td>
				}
			</tr>
		}
	</tbody>
</table>
<div class="@collapseDay container ">
	<div class="row">
		<h4>Events on @(selectedDayTitle)</h4>
	</div>
	<div class="row">
		oop
	</div>
	<div class="row">
		<div class="row">
			aap
		</div>
		<div class="row">
			eep
		</div>
	</div>
</div>

@code {
	private string Title = "Gradebook";
	private DateTime CurrentMonth = DateTime.Today;
	private List<Week> Weeks;
	private bool DayExpand;
	private Day selectedDay;
	private string selectedDayTitle;
	private string collapseDay => DayExpand ? "selected" : "collapse";

	protected override void OnInitialized()
	{
		DayExpand = false;
		base.OnInitialized();
		UpdateWeeks();
	}

	private void PrevMonth()
	{
		ToggleDay(null);
		CurrentMonth = CurrentMonth.AddMonths(-1);
		UpdateWeeks();
	}

	private void NextMonth()
	{
		ToggleDay(null);
		CurrentMonth = CurrentMonth.AddMonths(1);
		UpdateWeeks();
	}

	private void UpdateWeeks()
	{
		var firstDayOfMonth = new DateTime(CurrentMonth.Year, CurrentMonth.Month, 1);
		var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
		var start = firstDayOfMonth.AddDays(-(int)firstDayOfMonth.DayOfWeek);
		var end = lastDayOfMonth.AddDays(6 - (int)lastDayOfMonth.DayOfWeek);

		var weeks = new List<Week>();
		for (var date = start; date <= end; date = date.AddDays(1))
		{
			if (date.DayOfWeek == DayOfWeek.Sunday)
			{
				weeks.Add(new Week());
			}
			weeks.Last().Days.Add(new Day
				{
					date = date,
					day = date.Day,
					IsCurrentMonth = date.Month == CurrentMonth.Month,
					ScheduledEvents = new List<Event>()
				});
		}
		Weeks = weeks;
	}

	private void AddEvent(Day day)
	{
		var scheduledEvent = "school";
		//var scheduledEvent = prompt("Enter the name of the event:");
		if (!string.IsNullOrWhiteSpace(scheduledEvent))
		{
			//	day.ScheduledEvents.Add(scheduledEvent);
		}
	}

	private void ToggleDay(Day day)
	{
		selectedDay = !DayExpand ? day : null;
		selectedDayTitle = !DayExpand ? selectedDay.date.ToString("dddd, MMMM d") : null;
		DayExpand = !DayExpand;
	}

	private class Day
	{
		public int day { get; set; }
		public DateTime date;
		public bool IsCurrentMonth { get; set; }
		public List<Event> ScheduledEvents { get; set; }
	}

	private class Week
	{
		public List<Day> Days { get; set; } = new List<Day>();
	}

	private class Event
	{
		public string title { get; set; }
		public string description { get; set; }
		public DateTime start;
		public DateTime end;
	}
}
