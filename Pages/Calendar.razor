@page "/calendar"

@using EdUnity.Data
@using Blazorise
@using Blazorise.Bootstrap

<NavMenu Title="@Title" />
<section />
@* main calendar *@
<section>
	@* navigation between months *@
	<div class="d-flex justify-content-center" style="padding-bottom: 1em">
		<button class="btn month-nav" @onclick="PrevMonth">&lt;</button>
		<h3 class="align-middle">@CurrentMonth.ToString("MMMM yyyy")</h3>
		<button class="btn month-nav" @onclick="NextMonth">&gt;</button>
	</div>
	@* table for each day *@
	<table class="table">
		@* days of the week *@
		<thead>
			<tr>
				@foreach (var dayOfWeek in Enum.GetValues(typeof(DayOfWeek)))
				{
					<th scope="col">@dayOfWeek.ToString().Substring(0, 3)</th>
				}
			</tr>
		</thead>
		@* days of the month *@
		<tbody>
			@foreach (var week in Weeks)
			{
				<tr>
					@foreach (var day in week.Days)
					{
						@* select/unselect each day  *@
						<td scope="row" @onclick="()=>ToggleDay(day)" style="background-color:@(day.Equals(SelectedDay) ? "rgba(219, 50, 77, 0.2)" : "")">
							<div class="@(day.IsCurrentMonth ? "day-header" : "text-muted")">@day.day</div>
							<ul class="d-flex flex-row">
								@* show all events as colored circles for each day *@
								@foreach (var e in GetEvents(day.date))
								{
									<li class="event-dot" style="background-color:@GetColor(e)"></li>
								}
							</ul>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>

	@* bottom display to show events for selected day *@
	@if (SelectedDay != null)
	{
		<div class="selected container-fluid">
			<div class="row">
				<h4 class="text-center">Events on <strong>@(SelectedDayTitle)</strong></h4>
			</div>
			<div class="row my-3">
				@* show list of events for selected day *@
				<div class="col container-fluid">
					<ul class="list-group">
						@foreach (var e in GetEvents(SelectedDay.date))
						{
							<li class="btn btn-dark list-group-item" style="background-color:@GetColor(e)" @onclick="()=>SetEvent(e)">@e.TITLE</li>
						}
					</ul>
				</div>
				@* show selected event information on right *@
				@if (SelectedEvent != null)
				{
					<div class="col container-fluid">
						<div class="row container-fluid">
							<h4><strong>@SelectedEvent.TITLE</strong></h4>
							<h6>@SelectedEvent.DESCRIPTION</h6>
							<h6><strong>Start: </strong>@DateTime.Parse(SelectedEvent.START).ToString("M/d/yy h:mm tt")</h6>
							<h6><strong>End: </strong>@DateTime.Parse(SelectedEvent.END).ToString("M/d/yy h:mm tt")</h6>
						</div>
					</div>
				}
				@*leave right side empty when not selected*@
				else
				{
					<div class="col container-fluid">
						<div class="row container-fluid">
							<h4><strong></strong></h4>
						</div>
					</div>
				}
			</div>
			<hr>
			<div class="row justify-content-center mb-4">
				<button class="btn active w-25" @onclick="OpenPopup">Add Event</button>
			</div>
			<br />
			<br />
		</div>
	}

	@* popup menu to create new event *@
	@if (PopupDisplay)
	{
		<div class="modal-overlay" @onclick="ClosePopup"></div>
		<div class="modal d-flex align-items-center justify-content-center">
			<div class="modal-content">
				<div class="modal-header">
					<h3 class="modal-title text-center">Create Event</h3>
					<button type="button" class="btn-close" @onclick="ClosePopup"></button>
				</div>
				@* new event content *@
				<div class="modal-body" style="padding-top:0">
					<EditForm Model="@Model" OnValidSubmit="@Submit">
						<DataAnnotationsValidator />
						<div>
							<label class="form-label">Title</label>
							<div>
								<InputText type="text" class="form-control" placeholder="An Event" @bind-Value="Model.TITLE" />
							</div>
						</div>
						<div>
							<label class="form-label">Category</label>
							<div>
								<InputSelectEnum class="form-select" @bind-Value="Model.TYPE" />
							</div>
						</div>
						<div class="row">
							<div class="col">
								<label class="form-label">Start Date</label>
								<div>
									<InputDate class="form-control" @bind-Value="StartDate" />
								</div>
							</div>
							<div class="col">
								<label class="form-label">End Date</label>
								<div>
									<InputDate class="form-control" @bind-Value="EndDate" />
								</div>
							</div>
						</div>
						<div class="row">
							<div class="col">
								<label class="form-label">Start Time</label>
								<div>
									<TimePicker TValue="TimeSpan?" Inline @bind-Value="StartTime"/>
								</div>
							</div>
							<div class="col">
								<label class="form-label">End Time</label>
								<div>
									<TimePicker TValue="TimeSpan?" Inline @bind-Value="EndTime" />
								</div>
							</div>
						</div>

						<div>
							<label class="form-label">Description</label>
							<div>
								<InputTextArea type="text" class="form-control" @bind-Value="Model.DESCRIPTION" />
							</div>
						</div>
						<Microsoft.AspNetCore.Components.Forms.ValidationSummary />
						<div class="col d-flex justify-content-center">
							<button type="submit" class="btn w-25" style="color:white; background-color:#511C29;">Create</button>
						</div>
					</EditForm>
				</div>
			</div>
		</div>
	}
</section>
<section />
@code
{
	// TO-DO: ADD TIME SELECTIONS FOR CREATE EVENT

	private string Title = "Calendar";

	// static calendar data
	private DateTime CurrentMonth = DateTime.Today;
	private List<Week> Weeks = new();
	private List<Event> Events;

	// calendar view
	private bool DayExpand;
	private Day SelectedDay;
	private Event SelectedEvent;
	private string SelectedDayTitle;
	private string CollapseDay => DayExpand ? "selected" : "collapse";

	// add event
	private bool PopupDisplay = false;
	private Event Model = new();
	private DateTime StartDate = DateTime.Today, EndDate = DateTime.Today;
	private TimeSpan? StartTime = TimeSpan.Zero, EndTime = TimeSpan.Zero;

	// each day (square) on calendar
	public class Day
	{
		public int day { get; set; }
		public DateTime date;
		public bool IsCurrentMonth { get; set; }
	}

	// 7 days -> 1 week
	public class Week
	{
		public List<Day> Days { get; set; } = new List<Day>();
	}

	// navigation
	protected async override void OnInitialized()
	{
		DayExpand = false;
		SelectedDay = null;
		SelectedEvent = null;
		await LoadEvents();
		base.OnInitialized();
		UpdateWeeks();
		StateHasChanged();
	}
	private void PrevMonth()
	{
		ToggleDay(null);
		CurrentMonth = CurrentMonth.AddMonths(-1);
		UpdateWeeks();
	}
	private void NextMonth()
	{
		ToggleDay(null);
		CurrentMonth = CurrentMonth.AddMonths(1);
		UpdateWeeks();
	}
	private void ToggleDay(Day day)
	{
		if (day == null)
		{
			DayExpand = false;
			SelectedDay = null;
			SelectedDayTitle = null;
			SelectedEvent = null;
		}
		else
		{
			if (day == SelectedDay)
			{
				SelectedDay = null;
				DayExpand = false;
				SelectedEvent = null;
			}
			else
			{
				SelectedDay = day;
				DayExpand = true;
				SelectedDayTitle = SelectedDay.date.ToString("dddd, MMMM d");
				if (GetEvents(SelectedDay.date).Count() > 0) SelectedEvent = GetEvents(SelectedDay.date)[0];
				else SelectedEvent = null;
			}
		}
	}

	// add event menu
	private void OpenPopup()
	{
		StartDate = SelectedDay.date;
		EndDate = SelectedDay.date;
		PopupDisplay = true;
	}
	private void ClosePopup()
	{
		PopupDisplay = false;
	}
	private async Task Submit()
	{
		if (Model.TITLE == null) return;
		// TO-DO: FIX TIME ADDING TO EVENTS
		Model.START = StartDate.Add(StartTime.Value).ToString();
		Model.END = EndDate.Add(EndTime.Value).ToString();
		Model.CREATOR_ID = Preferences.Get("ID", -1);
		await App.EdUnityRepo.AddEvent(Model);
		await LoadEvents();
		ClosePopup();
	}

	// calendar content management
	private async Task LoadEvents()
	{
		Events = await App.EdUnityRepo.GetEvents(CurrentMonth);
	}
	private List<Event> GetEvents(DateTime date)
	{
		List<Event> today = new();
		foreach (Event e in Events)
		{
			if (date.Date >= DateTime.Parse(e.START).Date && date.Date < DateTime.Parse(e.END).Date.AddDays(1))
			{
				today.Add(e);
			}
		}
		return today;
	}
	private void UpdateWeeks()
	{
		var firstDayOfMonth = new DateTime(CurrentMonth.Year, CurrentMonth.Month, 1);
		var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
		var start = firstDayOfMonth.AddDays(-(int)firstDayOfMonth.DayOfWeek);
		var end = lastDayOfMonth.AddDays(6 - (int)lastDayOfMonth.DayOfWeek);
		var weeks = new List<Week>();
		for (var date = start; date <= end; date = date.AddDays(1))
		{
			if (date.DayOfWeek == DayOfWeek.Sunday) weeks.Add(new Week());
			weeks.Last().Days.Add(new Day
				{
					date = date,
					day = date.Day,
					IsCurrentMonth = date.Month == CurrentMonth.Month,
				});
		}
		Weeks = weeks;
	}
	private string GetColor(Event e)
	{
		switch (e.TYPE)
		{
			case EventType.Academic:
				return "#FF5733";
			case EventType.Athletics:
				return "#3366FF";
			case EventType.Celebration:
				return "#FFC300";
			case EventType.Ceremony:
				return "#9933CC";
			case EventType.Clubs:
				return "#33CC66";
			case EventType.Holiday:
				return "#1C415A";
			case EventType.Meeting:
				return "#9D6868";
			case EventType.Trip:
				return "#FF3366";
			case EventType.Other:
				return "#666666";
			default:
				return "";
		}
	}

	// mutators
	private void SetEvent(Event e)
	{
		SelectedEvent = e;
	}
}