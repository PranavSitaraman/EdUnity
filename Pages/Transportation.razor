@page "/transportation"
@using EdUnity.Data
@inject IJSRuntime Js;
<NavMenu Title="@Title" />
<section style="padding:0px"/>
<section style="padding:0px">
    <div class="long-press-menu">
        <div @onclick="Pickup">Pickup Mode</div>
        <div style="border-left: thick groove white" @onclick="Dropoff">Dropoff Mode</div>
    </div>
@if (_lat != null && _lon != null)
{
    <ActionMenu Lat="@((double)_lat)" Lon="@((double)_lon)" CloseCallback="@CloseActionMenu" />
}
<MapComponent ViewDetailsCallback="@ViewDetails" OnLongPressAsync="@ShowLongPressMenu" />
@if (_details != null)
{
    <EventView Loc="@_currentPins[(Guid)_details]" CloseCallback="@CloseDetailsView" />
}
</section>
<section/>
@code
{
    public bool pickup = true;
    private string Title = "Transportation";
    public static Dictionary<Guid, Pin> _currentPins = new();
    private Double? _lat;
    private Double? _lon;
    private Guid? _details;
    private async Task CloseActionMenu()
    {
        await Js.InvokeVoidAsync("removeLongPressIndicator");
        _lat = null;
        _lon = null;
        StateHasChanged();
    }
    private void CloseDetailsView()
    {
        _details = null;
        StateHasChanged();
    }
    private async Task ViewDetails(Guid id)
    {
        _details = null;
        StateHasChanged();
        _details = id;
        StateHasChanged();
    }
    private async Task ShowLongPressMenu(double lat, double lon)
    {
        _lat = lat;
        _lon = lon;
        await Js.InvokeVoidAsync("placeLongPressIndicator", lat, lon);
        StateHasChanged();
    }
    private async Task Pickup()
    {
        pickup = true;
        await Js.InvokeVoidAsync("pickup");
        StateHasChanged();
    }
    private async Task Dropoff()
    {
        pickup = false;
        await Js.InvokeVoidAsync("dropoff");
        StateHasChanged();
    }
}