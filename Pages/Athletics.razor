@page "/athletics"
@using EdUnity.Data
@inject NavigationManager NavigationManager;

<NavMenu Title="@Title" />
<section />
<section>
	@foreach (var match in Matches)
	{
		<center>
		<div class="game" style="width:95vw">
			<div class="game-info" style="width:15vw">
				<div class="sport-icon game-date">
					<span class="fa @GetSportIcon(match.game.SPORT) fa-2x"></span>
					@DateTime.Parse(match.game.DATE).ToString("MM/dd")
				</div>
			</div>
			<div class="game-result">
				<div class="team" style="width:20vw">
					<center>
					<div class="team-name">
						@match.NAME_A
					</div>
					<div class="team-score">
						@match.game.SCORE_A
					</div>
					</center>
				</div>
				<div class="versus" style="width:15vw">
					<center>
					VS
					</center>
				</div>
				<div class="team" style="width:20vw">
					<center>
					<div class="team-name">
						@match.NAME_B
					</div>
					<div class="team-score">
						@match.game.SCORE_B
					</div>
					</center>
				</div>
			</div>
		</div>
		</center>
	}
</section>
<section />

@code {
	private string Title = "Athletics";
	private class Match
	{
		public Game game { get; set; }
		public string NAME_A { get; set; }
		public string NAME_B { get; set; }
	}
	private List<Match> Matches = new();
	protected async override void OnInitialized()
	{
		await LoadGames();
		base.OnInitialized();
		StateHasChanged();
	}
	private async Task LoadGames()
	{
		List<Game> games = await App.EdUnityRepo.GetGames();
		foreach (Game g in games)
		{
			string a = (await App.EdUnityRepo.GetInstitution(g.TEAM_A)).NAME;
			string b = (await App.EdUnityRepo.GetInstitution(g.TEAM_B)).NAME;
			Matches.Add(new Match { game = g, NAME_A = a, NAME_B = b });
		}
	}
	private string GetSportIcon(Sport sport)
	{
		// based on which sport is being displayed in the record
		switch (sport)
		{
			// retrieve icons from Font Awesome's library for use
			case Sport.Soccer:
				return "fa-futbol";
			case Sport.Football:
				return "fa-football-ball";
			case Sport.Basketball:
				return "fa-basketball-ball";
			case Sport.Hockey:
				return "fa-hockey-puck";
			case Sport.Baseball:
				return "fa-baseball-ball";
			default:
				// return a plain ball
				return "fa-sport";
		}
	}
}
