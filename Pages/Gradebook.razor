@page "/gradebook"

@using EdUnity.Data

<NavMenu Title="@Title" />
<section />
<section>
	<section id="attendance">
		<center>
			<h2>Attendance</h2>
			<h5><i>Week of @currentWeek.ToString("MM/dd/yyyy");</i></h5>
			<table class="att-table">
				<thead class="att-head">
					<tr class="att-tr">
						<th class="att-th">M</th>
						<th class="att-th">T</th>
						<th class="att-th">W</th>
						<th class="att-th">R</th>
						<th class="att-th">F</th>
					</tr>
				</thead>
				<tbody class="att-bod">
					<tr class="att-tr">
						@if (initializedDone)
						{
							@foreach (string a in Week)
							{
								<td class="att-td" style="color:@GetColor(a)">@a</td>
							}
						}
					</tr>
				</tbody>
			</table>
		</center>
	</section>
	<br />
	<section id="grades" style="padding-bottom: 50px">
		<center>
			<h2>Gradebook</h2>
		</center>
		@foreach (var course in Classes)
		{
			<div class="course">
				<div class="course-header" @onclick="(() => ToggleAssignments(course))">
					<div class="course-name">@course.Name</div>
					<div class="course-grade">@CalculateLetterGrade(course)</div>
					<div class="course-average">Avg: @CalculateAverage(course)%</div>
				</div>
				<div class="assignments" style="display: @(course.ShowAssignments ? "block" : "none")">
					<table class="assignments-table">
						<thead>
							<tr>
								<th>Due Date</th>
								<th>Assignment Name</th>
								<th>Grade</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var assignment in course.Assignments)
							{
								<tr>
									<td>@assignment.DUEDATE</td>
									<td>@assignment.NAME</td>
									<td>@assignment.GRADE</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
		}
	</section>
</section>
<section />

@code {
	private string Title = "Portal";
	public class Class
	{
		public string Name { get; set; }
		public List<Assignment> Assignments = new();
		public bool ShowAssignments { get; set; }
	}
	private List<Class> Classes = new();
	string[] Week = { "Unmarked", "Unmarked", "Unmarked", "Unmarked", "Unmarked" };
	private DateTime currentWeek = DateTime.Now.AddDays(-(int)DateTime.Now.DayOfWeek + 1);
	bool initializedDone = false;
	protected async override void OnInitialized()
	{
		await LoadWeek();
		await LoadClasses();
		base.OnInitialized();
		initializedDone = true;
		StateHasChanged();
	}
	private async Task LoadWeek()
	{
		for (int i = 0; i < 5; i++)
		{
			Attendance a = await App.EdUnityRepo.GetAttendance(currentWeek.AddDays(i).ToString("yyyy-MM-dd"));
			Console.WriteLine(currentWeek.AddDays(i).ToString("yyyy-MM-dd"));
			if (a != null)
			{
				Week[i] = (a.STATUS == AttendanceStatus.Present ? "Present" : (a.STATUS == AttendanceStatus.Tardy ? "Tardy" : "Absent"));
			}
		}
	}
	private async Task LoadClasses()
	{
		List<Course> courses = await App.EdUnityRepo.GetCourses();
		List<Assignment> assignments = await App.EdUnityRepo.GetAssignments();
		foreach (Course c in courses)
		{
			Class d = new Class { Name = c.NAME };
			foreach (Assignment a in assignments)
			{
				if (a.COURSE_ID == c.ID)
				{
					a.DUEDATE = DateTime.Parse(a.DUEDATE).ToString("MM/dd");
					d.Assignments.Add(a);
				}
			}
			Classes.Add(d);
		}
	}
	private void ToggleAssignments(Class course)
	{
		course.ShowAssignments = !course.ShowAssignments;
	}
	private double CalculateAverage(Class course)
	{
		if (course.Assignments.Count > 0)
		{
			double totalGrade = 0;
			foreach (var assignment in course.Assignments)
			{
				totalGrade += assignment.GRADE;
			}

			return totalGrade / course.Assignments.Count;
		}

		return 0;
	}
	private string CalculateLetterGrade(Class course)
	{
		double average = CalculateAverage(course);
		int grade = (int)Math.Round(average, MidpointRounding.AwayFromZero);

		if (grade >= 97)
		{
			return "A+";
		}
		else if (grade >= 93)
		{
			return "A";
		}
		else if (grade >= 90)
		{
			return "A-";
		}
		else if (grade >= 87)
		{
			return "B+";
		}
		else if (grade >= 83)
		{
			return "B";
		}
		else if (grade >= 80)
		{
			return "B-";
		}
		else if (grade >= 77)
		{
			return "C+";
		}
		else if (grade >= 73)
		{
			return "C";
		}
		else if (grade >= 70)
		{
			return "C-";
		}
		else if (grade >= 67)
		{
			return "D+";
		}
		else if (grade >= 65)
		{
			return "D";
		}
		else
		{
			return "F";
		}
	}
	private string GetColor(string a)
	{
		if (a.Equals("Absent")) return "red";
		else if (a.Equals("Tardy")) return "blue";
		else if (a.Equals("Present")) return "green";
		else return "black";
	}
}
