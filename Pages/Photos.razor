@page "/photos"

@using EdUnity.Data
@using System.IO;
@using System.Threading.Tasks;
@using System.Reflection;

<NavMenu Title="@Title" />
<section>
	<div class="d-flex justify-content-center" style="margin-top:30px">
		<a href="https://twitter.com/MCVTS_ACE" class="btn mb-4 social">
			<span class="fa fa-solid fa-twitter fa-2x social-icon" aria-hidden="true"></span>
		</a>
		<a href="https://www.instagram.com/edisonacademymagnetschool/" class="btn mb-4 social">
			<span class="fa fa-solid fa-instagram fa-2x social-icon" aria-hidden="true"></span>
		</a>
		<a href="https://www.facebook.com/groups/1380582742219575" class="btn mb-4 social">
			<span class="fa fa-solid fa-facebook fa-2x social-icon" aria-hidden="true"></span>
		</a>
		<a class="btn mb-4 social post-button" @onclick="OpenPopup">Post!</a>
	</div>

	<div class="d-flex flex-wrap justify-content-center" style="margin-bottom: 120px">
		@foreach (var photo in PhotoList)
		{
			<div class="card" style="width: 18rem;">
				<img src="@photo.PATH" class="card-img-top" alt="@photo.TITLE" @onclick="(() => ExpandImage(photo.PATH))">
				<div class="card-body">
					<h5 class="card-title">@photo.TITLE</h5>
					<p class="card-text">@photo.DESCRIPTION</p>
				</div>
			</div>
		}
	</div>

	@if (IsImageExpanded)
	{
		<div class="expanded-image-container">
			<img src="@ExpandedImagePath" class="expanded-image" alt="Expanded Image" @onclick="CollapseImage" />
		</div>
	}

	@if (PopupDisplay)
	{
		<div class="modal-overlay" @onclick="ClosePopup"></div>
		<div class="modal d-flex align-items-center justify-content-center">
			<div class="modal-content">
				<div class="modal-header">
					<h3 class="modal-title text-center">Create Event</h3>
					<button type="button" class="btn-close" @onclick="ClosePopup"></button>
				</div>
				@* new event content *@
				<div class="modal-body" style="padding-top:0">
					<EditForm Model="@Model" OnValidSubmit="@Submit">
						<DataAnnotationsValidator />
						<div>
							<label class="form-label">Title</label>
							<div>
								<InputText type="text" class="form-control" placeholder="Title" @bind-Value="Model.TITLE" />
							</div>
						</div>
						<div>
							<label class="form-label">Description</label>
							<div>
								<InputTextArea type="text" class="form-control" @bind-Value="Model.DESCRIPTION" />
							</div>
						</div>
						<div class="form-group">
							<label for="imageInput">Image</label>
							<InputFile id="imageInput" class="form-control" OnChange="HandleImageChange" />
						</div>
						<Microsoft.AspNetCore.Components.Forms.ValidationSummary />
						<div class="col d-flex justify-content-center">
							<button type="submit" class="btn w-25" style="color:white; background-color:#511C29;">Post</button>
						</div>
					</EditForm>
				</div>
			</div>
		</div>
	}
</section>

@code {
	private string Title = "Photos";
	private string ExpandedImagePath;
	private bool IsImageExpanded = false;
	private List<Photo> PhotoList = new();
	private bool PopupDisplay = false;
	private Photo Model = new();
	private IBrowserFile ImageFile { get; set; }

	protected async override void OnInitialized()
	{
		await LoadPhotos();
		base.OnInitialized();
		StateHasChanged();
	}
	private void ExpandImage(string imagePath)
	{
		ExpandedImagePath = imagePath;
		IsImageExpanded = true;
	}
	private void CollapseImage()
	{
		IsImageExpanded = false;
	}
	private async Task LoadPhotos()
	{
		PhotoList = await App.EdUnityRepo.GetPhotos();
		PhotoList.Reverse();
	}
	private void OpenPopup()
	{
		PopupDisplay = true;
	}
	private void ClosePopup()
	{
		PopupDisplay = false;
	}
	private async Task HandleImageChange(InputFileChangeEventArgs e)
	{
		ImageFile = e.File;
	}
	private async Task<string> SaveFile(IBrowserFile imageFile)
	{
		if (imageFile != null)
		{
			var appDirectory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
			var uploadsFolder = Path.Combine(appDirectory, "wwwroot", "img", "photos");
			var filePath = Path.Combine(uploadsFolder, imageFile.Name);
			Directory.CreateDirectory(uploadsFolder);
			using (var fileStream = new FileStream(filePath, FileMode.Create))
			{
				await imageFile.OpenReadStream().CopyToAsync(fileStream);
			}
			var splittedPath = filePath.Split("wwwroot\\");

			if (splittedPath.Length > 1)
			{
				// Return the path after "Uploads/"
				return splittedPath[1].Replace("\\", "/");
			}
		}
		return null; // Return null if no file was selected
	}
	private async Task Submit()
	{
		if (Model.TITLE == null || ImageFile == null) return;
		Model.PATH = await SaveFile(ImageFile);
		await App.EdUnityRepo.AddPhoto(Model);
		await LoadPhotos();
		ClosePopup();
	}
}
